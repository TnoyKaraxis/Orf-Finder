package com.uni.orffinder;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * App creates the GUI for the analysis and creation for different ORF-Values in Sequences
 * @author Philipp
 */
public class App extends javax.swing.JFrame {
    /**
     * the arguments given when the App is run
     */
    private static String[] arguments;
    /**
     * The Sequences currently handled
     */
    private Sequences multipleSequences;
    /**
     * Creates new form NewJFrame
    */
    public App() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlGenerateSequences = new javax.swing.JPanel();
        btnGenerateMultiple = new javax.swing.JButton();
        fldNumberOfSequences = new javax.swing.JTextField();
        lblNumberOfSequences = new javax.swing.JLabel();
        lblGenerateSequences = new javax.swing.JLabel();
        lblNumberOfBases = new javax.swing.JLabel();
        fldNumberOfBasesMultiple = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        areaResultMultiple = new javax.swing.JTextArea();
        lblAWeight = new javax.swing.JLabel();
        lblCWeight = new javax.swing.JLabel();
        lblGWeight = new javax.swing.JLabel();
        fldAWeight = new javax.swing.JTextField();
        fldCWeight = new javax.swing.JTextField();
        fldGWeight = new javax.swing.JTextField();
        lblLengthBiggestORF = new javax.swing.JLabel();
        fldLengthBiggestOrf = new javax.swing.JTextField();
        btnReadMultiple = new javax.swing.JButton();
        fldPathMultiple = new javax.swing.JTextField();
        lblPathMultiple = new javax.swing.JLabel();
        sldAWeight = new javax.swing.JSlider();
        sldCWeight = new javax.swing.JSlider();
        sldGWeight = new javax.swing.JSlider();
        lblPositionLongestORF = new javax.swing.JLabel();
        fldPositionLongestORFSequence = new javax.swing.JTextField();
        lblAvgLengthORFs = new javax.swing.JLabel();
        fldAvgLengthORFs = new javax.swing.JTextField();
        lblPickSpecificORF = new javax.swing.JLabel();
        cbIncludeReverseBases = new javax.swing.JCheckBox();
        lblNumberORFPick = new javax.swing.JLabel();
        fldORFNumberPick = new javax.swing.JTextField();
        btnPickORF = new javax.swing.JButton();
        lblSequenceNumber = new javax.swing.JLabel();
        fldSequenceNumber = new javax.swing.JTextField();
        lblORFLength = new javax.swing.JLabel();
        fldORFLength = new javax.swing.JTextField();
        fldORFPosition = new javax.swing.JTextField();
        lblPosition = new javax.swing.JLabel();
        fldORFReverse = new javax.swing.JTextField();
        lblReverse = new javax.swing.JLabel();
        btnShowRelationsPairsSampled = new javax.swing.JButton();
        lblATWeights = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btnShowRelationsSingelSampled = new javax.swing.JButton();
        lblTWeight = new javax.swing.JLabel();
        fldTWeight = new javax.swing.JTextField();
        sldTWeight = new javax.swing.JSlider();
        lblAvgNumberOrf = new javax.swing.JLabel();
        fldAvgNumberORFs = new javax.swing.JTextField();
        btnDefault = new javax.swing.JButton();
        btnSearchCodons = new javax.swing.JButton();
        lblSearchCodon = new javax.swing.JLabel();
        fldCodonToSearch = new javax.swing.JTextField();
        fldNumberOfCodons = new javax.swing.JTextField();
        lblSequenceLength = new javax.swing.JLabel();
        fldSequenceLength = new javax.swing.JTextField();
        btnRelationsData = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnlGenerateSequences.setName("generateSequencesPane"); // NOI18N

        btnGenerateMultiple.setText("Generate");
        btnGenerateMultiple.setName("btnGenerateMultiple"); // NOI18N
        btnGenerateMultiple.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateMultipleActionPerformed(evt);
            }
        });

        fldNumberOfSequences.setText("100");
        fldNumberOfSequences.setName("numberOfSequencesFld"); // NOI18N
        fldNumberOfSequences.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fldNumberOfSequencesActionPerformed(evt);
            }
        });

        lblNumberOfSequences.setText("number of Sequences");
        lblNumberOfSequences.setName("numberOfSequencesLbl"); // NOI18N

        lblGenerateSequences.setText("generate multiple Sequences");
        lblGenerateSequences.setName("generateSequencesLbl"); // NOI18N

        lblNumberOfBases.setText("number of bases");
        lblNumberOfBases.setName("numberOfBasesLbl"); // NOI18N

        fldNumberOfBasesMultiple.setText("1000");
        fldNumberOfBasesMultiple.setName("numberOfSequencesFld"); // NOI18N

        areaResultMultiple.setEditable(false);
        areaResultMultiple.setColumns(20);
        areaResultMultiple.setRows(5);
        areaResultMultiple.setAutoscrolls(false);
        areaResultMultiple.setName("generateSequenceResultFld"); // NOI18N
        jScrollPane1.setViewportView(areaResultMultiple);

        lblAWeight.setText("A Weight");

        lblCWeight.setText("C Weight");

        lblGWeight.setText("G Weight");

        fldAWeight.setText("25");
        fldAWeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fldAWeightActionPerformed(evt);
            }
        });

        fldCWeight.setText("25");
        fldCWeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fldCWeightActionPerformed(evt);
            }
        });

        fldGWeight.setText("25");
        fldGWeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fldGWeightActionPerformed(evt);
            }
        });

        lblLengthBiggestORF.setText("Length of the Biggest ORF");

        fldLengthBiggestOrf.setEditable(false);

        btnReadMultiple.setText("Read");
        btnReadMultiple.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReadMultipleActionPerformed(evt);
            }
        });

        fldPathMultiple.setText("./Data/example.fa");

        lblPathMultiple.setText("Path");

        sldAWeight.setMinimum(1);
        sldAWeight.setValue(25);
        sldAWeight.setName(""); // NOI18N
        sldAWeight.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sldAWeightStateChanged(evt);
            }
        });

        sldCWeight.setMinimum(1);
        sldCWeight.setValue(25);
        sldCWeight.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sldCWeightStateChanged(evt);
            }
        });

        sldGWeight.setMinimum(1);
        sldGWeight.setValue(25);
        sldGWeight.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sldGWeightStateChanged(evt);
            }
        });

        lblPositionLongestORF.setText("Sequence with Longest Orf");

        fldPositionLongestORFSequence.setEditable(false);

        lblAvgLengthORFs.setText("Avg length Orfs");

        fldAvgLengthORFs.setEditable(false);

        lblPickSpecificORF.setText("Pick Specific ORF");

        cbIncludeReverseBases.setSelected(true);
        cbIncludeReverseBases.setText("include reverse Bases");

        lblNumberORFPick.setText("Number");

        fldORFNumberPick.setText("0");

        btnPickORF.setText("Pick");
        btnPickORF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPickORFActionPerformed(evt);
            }
        });

        lblSequenceNumber.setText("Sequence");

        fldSequenceNumber.setText("0");
        fldSequenceNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fldSequenceNumberActionPerformed(evt);
            }
        });

        lblORFLength.setText("Length");

        fldORFLength.setEditable(false);

        fldORFPosition.setEditable(false);

        lblPosition.setText("Position");

        fldORFReverse.setEditable(false);

        lblReverse.setText("Reverse?");

        btnShowRelationsPairsSampled.setText("show ORF-Values of pairs from sampled Data");
        btnShowRelationsPairsSampled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowRelationsPairsSampledActionPerformed(evt);
            }
        });

        lblATWeights.setText("ORFs with different AT weights");

        jLabel1.setText("ORFs with different base weights");

        btnShowRelationsSingelSampled.setText("show ORF-Values of Singel from sampled Data");
        btnShowRelationsSingelSampled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowRelationsSingelSampledActionPerformed(evt);
            }
        });

        lblTWeight.setText("T Weight");

        fldTWeight.setText("25");
        fldTWeight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fldTWeightActionPerformed(evt);
            }
        });

        sldTWeight.setMinimum(1);
        sldTWeight.setValue(25);
        sldTWeight.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sldTWeightStateChanged(evt);
            }
        });

        lblAvgNumberOrf.setText("Avg number Orfs");

        fldAvgNumberORFs.setEditable(false);

        btnDefault.setText("Set to default");
        btnDefault.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDefaultActionPerformed(evt);
            }
        });

        btnSearchCodons.setText("Search");
        btnSearchCodons.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchCodonsActionPerformed(evt);
            }
        });

        lblSearchCodon.setText("Search average number of Codons");

        fldCodonToSearch.setText("ATG");

        fldNumberOfCodons.setEditable(false);

        lblSequenceLength.setText("Avg Sequence Length");

        fldSequenceLength.setEditable(false);

        javax.swing.GroupLayout pnlGenerateSequencesLayout = new javax.swing.GroupLayout(pnlGenerateSequences);
        pnlGenerateSequences.setLayout(pnlGenerateSequencesLayout);
        pnlGenerateSequencesLayout.setHorizontalGroup(
            pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGenerateSequencesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlGenerateSequencesLayout.createSequentialGroup()
                        .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1017, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pnlGenerateSequencesLayout.createSequentialGroup()
                                .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlGenerateSequencesLayout.createSequentialGroup()
                                            .addComponent(lblGenerateSequences)
                                            .addGap(181, 181, 181))
                                        .addGroup(pnlGenerateSequencesLayout.createSequentialGroup()
                                            .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(lblNumberOfSequences)
                                                .addComponent(lblNumberOfBases))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(fldNumberOfSequences, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                                                .addComponent(fldNumberOfBasesMultiple))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(pnlGenerateSequencesLayout.createSequentialGroup()
                                                    .addComponent(lblPathMultiple)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                    .addComponent(fldPathMultiple, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(pnlGenerateSequencesLayout.createSequentialGroup()
                                                    .addGap(6, 6, 6)
                                                    .addComponent(btnReadMultiple)))))
                                    .addGroup(pnlGenerateSequencesLayout.createSequentialGroup()
                                        .addComponent(btnGenerateMultiple)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cbIncludeReverseBases)))
                                .addGap(26, 26, 26)
                                .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnSearchCodons)
                                    .addComponent(lblSearchCodon)
                                    .addGroup(pnlGenerateSequencesLayout.createSequentialGroup()
                                        .addComponent(fldCodonToSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(fldNumberOfCodons, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlGenerateSequencesLayout.createSequentialGroup()
                                        .addGap(48, 48, 48)
                                        .addComponent(btnPickORF)
                                        .addGap(69, 69, 69)
                                        .addComponent(fldORFLength))
                                    .addGroup(pnlGenerateSequencesLayout.createSequentialGroup()
                                        .addGap(31, 31, 31)
                                        .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblPickSpecificORF)
                                            .addGroup(pnlGenerateSequencesLayout.createSequentialGroup()
                                                .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(lblNumberORFPick)
                                                    .addComponent(lblSequenceNumber))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(fldORFNumberPick, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                                                    .addComponent(fldSequenceNumber))
                                                .addGap(28, 28, 28)
                                                .addComponent(lblORFLength)))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fldORFPosition)
                                    .addComponent(lblPosition))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblReverse)
                                    .addComponent(fldORFReverse))))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlGenerateSequencesLayout.createSequentialGroup()
                        .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlGenerateSequencesLayout.createSequentialGroup()
                                .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblCWeight)
                                    .addComponent(lblAWeight))
                                .addGap(4, 4, 4)
                                .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(fldCWeight, javax.swing.GroupLayout.DEFAULT_SIZE, 66, Short.MAX_VALUE)
                                    .addComponent(fldAWeight))
                                .addGap(18, 18, 18)
                                .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlGenerateSequencesLayout.createSequentialGroup()
                                        .addComponent(sldAWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lblLengthBiggestORF))
                                    .addGroup(pnlGenerateSequencesLayout.createSequentialGroup()
                                        .addComponent(sldCWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lblPositionLongestORF)
                                        .addGap(18, 18, 18)
                                        .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(fldLengthBiggestOrf, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                                            .addComponent(fldPositionLongestORFSequence, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                                            .addComponent(fldAvgLengthORFs, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                                            .addComponent(fldAvgNumberORFs, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                                            .addComponent(fldSequenceLength)))))
                            .addGroup(pnlGenerateSequencesLayout.createSequentialGroup()
                                .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblATWeights)
                                    .addComponent(btnShowRelationsPairsSampled))
                                .addGap(94, 94, 94)
                                .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(btnShowRelationsSingelSampled)))
                            .addGroup(pnlGenerateSequencesLayout.createSequentialGroup()
                                .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlGenerateSequencesLayout.createSequentialGroup()
                                        .addComponent(lblTWeight)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(fldTWeight))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlGenerateSequencesLayout.createSequentialGroup()
                                        .addComponent(lblGWeight)
                                        .addGap(4, 4, 4)
                                        .addComponent(fldGWeight, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnlGenerateSequencesLayout.createSequentialGroup()
                                        .addComponent(sldGWeight, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lblAvgLengthORFs))
                                    .addGroup(pnlGenerateSequencesLayout.createSequentialGroup()
                                        .addComponent(sldTWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblSequenceLength)
                                            .addComponent(lblAvgNumberOrf)))))
                            .addComponent(btnDefault))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        pnlGenerateSequencesLayout.setVerticalGroup(
            pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlGenerateSequencesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblGenerateSequences)
                    .addComponent(lblPickSpecificORF)
                    .addComponent(lblSearchCodon))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlGenerateSequencesLayout.createSequentialGroup()
                        .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNumberOfSequences)
                            .addComponent(fldNumberOfSequences, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPathMultiple)
                            .addComponent(fldPathMultiple, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fldCodonToSearch)
                            .addComponent(fldNumberOfCodons))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblNumberOfBases)
                            .addComponent(fldNumberOfBasesMultiple)
                            .addComponent(btnReadMultiple))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnGenerateMultiple)
                            .addComponent(cbIncludeReverseBases))
                        .addGap(9, 9, 9))
                    .addGroup(pnlGenerateSequencesLayout.createSequentialGroup()
                        .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSequenceNumber)
                            .addComponent(fldSequenceNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblORFLength)
                                .addComponent(lblPosition)
                                .addComponent(lblReverse))
                            .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblNumberORFPick)
                                .addComponent(fldORFNumberPick)
                                .addComponent(btnSearchCodons)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnPickORF)
                            .addComponent(fldORFLength)
                            .addComponent(fldORFPosition)
                            .addComponent(fldORFReverse))))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAWeight)
                    .addComponent(fldAWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sldAWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLengthBiggestORF)
                    .addComponent(fldLengthBiggestOrf))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCWeight)
                    .addComponent(fldCWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sldCWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPositionLongestORF)
                    .addComponent(fldPositionLongestORFSequence))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fldGWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sldGWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAvgLengthORFs)
                    .addComponent(fldAvgLengthORFs)
                    .addComponent(lblGWeight))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTWeight)
                    .addComponent(fldTWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sldTWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAvgNumberOrf)
                    .addComponent(fldAvgNumberORFs))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDefault)
                    .addComponent(lblSequenceLength)
                    .addComponent(fldSequenceLength))
                .addGap(53, 53, 53)
                .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblATWeights)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlGenerateSequencesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnShowRelationsPairsSampled)
                    .addComponent(btnShowRelationsSingelSampled)))
        );

        btnRelationsData.setText("show ORF-Values of the current Data");
        btnRelationsData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRelationsDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(pnlGenerateSequences, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(220, 220, 220)
                        .addComponent(btnRelationsData)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlGenerateSequences, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRelationsData))
        );

        pnlGenerateSequences.getAccessibleContext().setAccessibleName("generateSequencesPane");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * generates multiple Sequences based on weights, number of bases and number of Sequences given in the textfields
     * @param evt the Action Event of the Button
     */
    private void btnGenerateMultipleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateMultipleActionPerformed
        String numberSequencesText = fldNumberOfSequences.getText();
        String numberBasesText = fldNumberOfBasesMultiple.getText();
        String aWeightTxt = fldAWeight.getText();
        String cWeightTxt = fldCWeight.getText();
        String gWeightTxt = fldGWeight.getText();
        String tWeightTxt = fldTWeight.getText();
        
        //check if the entered values are okay
        try
        {
            int numberOfSequences = Integer.parseInt(numberSequencesText);
            int numberOfBases = Integer.parseInt(numberBasesText);
            double aWeight = Double.parseDouble(aWeightTxt);
            double cWeight = Double.parseDouble(cWeightTxt);
            double gWeight = Double.parseDouble(gWeightTxt);
            double tWeight = Double.parseDouble(tWeightTxt);
            
            boolean reverse = cbIncludeReverseBases.isSelected();
            if( numberOfSequences <= 0 || numberOfBases <= 0 || aWeight <= 0.0 || cWeight <= 0.0 || tWeight <= 0.0 || gWeight <= 0.0 )
            {
                areaResultMultiple.setText( "Please enter integers > 0 into the Fields." );
            }
            else
            {
                //generate Sequences
                areaResultMultiple.setText("");
                double[] weights = {aWeight, cWeight, gWeight, tWeight};
                
                
                multipleSequences = new Sequences();
                for( int i = 0; i < numberOfSequences; i++ )
                {
                    Sequence seq = new Sequence( numberOfBases, weights, reverse);
                    multipleSequences.addSequence( seq );
                }
            }
        }
        catch( NumberFormatException ex )
        {
            areaResultMultiple.setText( "Please enter integers > 0 into the Fields." );
        } catch (IOException ex) {
            areaResultMultiple.setText( "Unexpected Error" );
        } catch (Exception ex) {
            areaResultMultiple.setText( "Unexpected Error" );
        }
        //calculate ORF values
        handelMultipleSequences();
        
    }//GEN-LAST:event_btnGenerateMultipleActionPerformed

    /**
     * called after the creation of the Sequences to calculate the ORF values
     */
    private void handelMultipleSequences()
    {
        int biggestOrfLength = 0;
        int biggestOrfPlace = 0;
        int ORFSize = 0;
        int ORFNumber = 0;
        
        for( int i =0; i < multipleSequences.getSequences().size(); i++ )
        {
            Sequence seq = multipleSequences.getSequences().get(i);
            try {
                seq.generateOpenReadingFrames();
                if( !seq.getORFs().isEmpty() )
                {
                    int lengthCurrentLongestOrf = seq.getBiggestORF().getBases().length();
                    if( lengthCurrentLongestOrf > biggestOrfLength )
                    {
                        biggestOrfLength = lengthCurrentLongestOrf;
                        biggestOrfPlace = i;
                    }
                    
                    ORFNumber = ORFNumber + seq.getORFs().size();
                    for( int j = 0; j < seq.getORFs().size(); j++ )
                    {
                        ORFSize = ORFSize + seq.getORFs().get(j).getBases().length();
                    }
                    
                }
            } catch (Exception ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
        
        int aPercent = (int) Math.round( multipleSequences.getDifferentBasesRelative().get( 'A' ) * 100.0 );
        int cPercent = (int) Math.round( multipleSequences.getDifferentBasesRelative().get( 'C' ) * 100.0 );
        int gPercent = (int) Math.round( multipleSequences.getDifferentBasesRelative().get( 'G' ) * 100.0 );
        int tPercent = (int) Math.round( multipleSequences.getDifferentBasesRelative().get( 'T' ) * 100.0 );
        
        
        sldAWeight.setValue( aPercent );
        sldCWeight.setValue( cPercent );
        sldGWeight.setValue( gPercent );
        sldTWeight.setValue( tPercent );
        
        int avgLength = 0;
        for( int i = 0; i < multipleSequences.getSequences().size(); i++ )
        {
            avgLength = avgLength + multipleSequences.getSequences().get( i ).getBases().length();
        }
        avgLength = avgLength / multipleSequences.getSequences().size();
        fldSequenceLength.setText( avgLength + "" );
        
        if( !multipleSequences.getSequences().get(biggestOrfPlace).getORFs().isEmpty() )
        {
            OpenReadingFrame longestOrf = multipleSequences.getSequences().get( biggestOrfPlace ).getBiggestORF();
            fldPositionLongestORFSequence.setText( biggestOrfPlace + "" );
            fldORFLength.setText( biggestOrfLength + "" );
            fldORFPosition.setText( longestOrf.getPosition() + "" );
            fldORFReverse.setText( longestOrf.isOnReverse() + "" );
            fldLengthBiggestOrf.setText( biggestOrfLength + "" );
            areaResultMultiple.setText( "Bases: "+ longestOrf.getBases() + "\nAmino Acids: " + longestOrf.getAminoAcids() );
            
            fldAvgLengthORFs.setText( String.format("%.2f", ( (double) ORFSize / ORFNumber ) ) );
            fldAvgNumberORFs.setText( String.format("%.2f", ( (double) ORFNumber / multipleSequences.getSequences().size() ) ) );
        }
        else
        {
            areaResultMultiple.setText( "No ORFs" );
        }
        
    }
    
    private void fldNumberOfSequencesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fldNumberOfSequencesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fldNumberOfSequencesActionPerformed

    /**
     * Slider for the A-Weight
     * @param evt the event called if the Slider is moved 
     */
    private void sldAWeightStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sldAWeightStateChanged
        fldAWeight.setText( sldAWeight.getValue()  + "");
    }//GEN-LAST:event_sldAWeightStateChanged

    /**
     * Field for the A-Weight
     * @param evt the event called if enter is pressed in the field
     */
    private void fldAWeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fldAWeightActionPerformed
        try
        {
            int value = Integer.parseInt( fldAWeight.getText() );
            if( value < 1 || value > 100 )
            {
                areaResultMultiple.setText( "Please enter values from 1 to 100 into the weights" );
            }
            sldAWeight.setValue( value );
            
        }
        catch( NumberFormatException ex)
        {
            areaResultMultiple.setText( "Please enter values from 1 to 100 into the weights" );
        }
    }//GEN-LAST:event_fldAWeightActionPerformed

    /**
     * Slider for the C-Weight
     * @param evt the event called if the Slider is moved 
     */
    private void sldCWeightStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sldCWeightStateChanged
        fldCWeight.setText( sldCWeight.getValue()  + "");
    }//GEN-LAST:event_sldCWeightStateChanged
    /**
     * Field for the C-Weight
     * @param evt the event called if enter is pressed in the field
     */
    private void fldCWeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fldCWeightActionPerformed
        try
        {
            int value = Integer.parseInt( fldCWeight.getText() );
            if( value < 1 || value > 100 )
            {
                areaResultMultiple.setText( "Please enter values from 1 to 100 into the weights" );
            }
            sldCWeight.setValue( value );
            
        }
        catch( NumberFormatException ex)
        {
            areaResultMultiple.setText( "Please enter values from 1 to 100 into the weights" );
        }
    }//GEN-LAST:event_fldCWeightActionPerformed

    /**
     * Slider for the T-Weight
     * @param evt the event called if the Slider is moved 
     */
    private void sldTWeightStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sldTWeightStateChanged
        fldTWeight.setText( sldTWeight.getValue()  + "");
    }//GEN-LAST:event_sldTWeightStateChanged

    /**
     * Field for the T-Weight
     * @param evt the event called if enter is pressed in the field
     */
    private void fldTWeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fldTWeightActionPerformed
        try
        {
            int value = Integer.parseInt( fldTWeight.getText() );
            if( value < 1 || value > 100 )
            {
                areaResultMultiple.setText( "Please enter values from 1 to 100 into the weights" );
            }
            sldTWeight.setValue( value );
            
        }
        catch( NumberFormatException ex)
        {
            areaResultMultiple.setText( "Please enter values from 1 to 100 into the weights" );
        }
    }//GEN-LAST:event_fldTWeightActionPerformed
    /**
     * Slider for the G-Weight
     * @param evt the event called if the Slider is moved 
     */
    private void sldGWeightStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sldGWeightStateChanged
        fldGWeight.setText( sldGWeight.getValue()  + "");
    }//GEN-LAST:event_sldGWeightStateChanged

    /**
     * Field for the G-Weight
     * @param evt the event called if enter is pressed in the field
     */
    private void fldGWeightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fldGWeightActionPerformed
        try
        {
            int value = Integer.valueOf( fldGWeight.getText() );
            if( value < 1 || value > 100 )
            {
                areaResultMultiple.setText( "Please enter values from 1 to 100 into the weights" );
            }
            sldGWeight.setValue( value );
            
        }
        catch( NumberFormatException ex)
        {
            areaResultMultiple.setText( "Please enter values from 1 to 100 into the weights" );
        }
    }//GEN-LAST:event_fldGWeightActionPerformed

    /**
     * Button to read Sequences from a text file with the path given in the field
     * @param evt the action event of the Button
     */
    private void btnReadMultipleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReadMultipleActionPerformed
        String input;
        String path = fldPathMultiple.getText();
        boolean reverse = cbIncludeReverseBases.isSelected();
        if( path.equals( "" ) )
        {
            areaResultMultiple.setText( "Please enter a Path" );
        }
        try
        {

           input = new String(Files.readAllBytes( Paths.get( path ) ) );
           multipleSequences = new Sequences( input , reverse);
           handelMultipleSequences();
        }
        catch(IOException ex)
        {
            System.out.println( "piel");
            areaResultMultiple.setText( "Couldnt read file" );
        }
    }//GEN-LAST:event_btnReadMultipleActionPerformed

    private void fldSequenceNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fldSequenceNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fldSequenceNumberActionPerformed
    
    /**
     * Button to pick a specific ORF from the current sequences based on the Sequence and position given in the Fields
     * @param evt action event of the button
     */
    private void btnPickORFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPickORFActionPerformed
        try
        {
            int sequenceID = Integer.parseInt( fldSequenceNumber.getText() );
            int orfID = Integer.parseInt( fldORFNumberPick.getText() );
            if( multipleSequences == null )
            {
                areaResultMultiple.setText( "Please read or generate Sequences first." );
            }
            else if( sequenceID < 0 || sequenceID >= multipleSequences.getSequences().size() )
            {
                areaResultMultiple.setText( "Please enter a number from 0 to " + (multipleSequences.getSequences().size() - 1 ) + " as Sequence Number" );
            }
            else
            {
                Sequence currentSequence = multipleSequences.getSequences().get( sequenceID );
                if( orfID < 0 || orfID >= currentSequence.getORFs().size() )
                {
                    areaResultMultiple.setText( "Please enter a number from 0 to " + (currentSequence.getORFs().size() - 1 ) + " as ORF Number" );
                }
                else
                {
                    OpenReadingFrame currentOrf = currentSequence.getORFs().get( orfID );
                    areaResultMultiple.setText( "Bases: " + currentOrf.getBases() + "\n" + "AminoAcids: " + currentOrf.getAminoAcids() );
                    fldORFLength.setText( currentOrf.getBases().length() + "" );
                    fldORFPosition.setText( currentOrf.getPosition() + "" );
                    fldORFReverse.setText( currentOrf.isOnReverse()+ "" );
                    Map<Character, Double> relativeBases = currentOrf.generateRelativeBases();
                    sldAWeight.setValue( (int) Math.round( relativeBases.get( 'A' ) * 100  ) );
                    sldCWeight.setValue( (int) Math.round(relativeBases.get( 'C' ) * 100  ) );
                    sldTWeight.setValue( (int) Math.round(relativeBases.get( 'T' ) * 100  ) );
                    sldGWeight.setValue( (int) Math.round(relativeBases.get( 'G' ) * 100  ) );
                }
            }
        }
        catch( NumberFormatException ex )
        {
            areaResultMultiple.setText( "Please enter a Number." );
        }
    }//GEN-LAST:event_btnPickORFActionPerformed

    /**
     * Creates the graphics of ORF-values for different AT-concentrations based on the sequence- and bases number given inthe fields
     * @param evt the action event of the button
     */
    private void btnShowRelationsPairsSampledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowRelationsPairsSampledActionPerformed
        try
        {
            int numberSequence = Integer.parseInt( fldNumberOfSequences.getText() );
            int numberBases = Integer.parseInt( fldNumberOfBasesMultiple.getText() );
            boolean reverseBases = cbIncludeReverseBases.isSelected();
            RelationsPairs.main( arguments, numberSequence, numberBases, reverseBases );
        }
        catch( NumberFormatException ex )
        {
            areaResultMultiple.setText( "Please enter a Number." );
        }
    }//GEN-LAST:event_btnShowRelationsPairsSampledActionPerformed

    /**
     * Creates the graphics of ORF-values for different A-, C-, G- and T-concentrations based on the sequence- and bases number given inthe fields
     * @param evt the action event of the button
     */
    private void btnShowRelationsSingelSampledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowRelationsSingelSampledActionPerformed
        try
        {
            int numberSequence = Integer.parseInt( fldNumberOfSequences.getText() );
            int numberBases = Integer.parseInt( fldNumberOfBasesMultiple.getText() );
            boolean reverseBases = cbIncludeReverseBases.isSelected();
            RelationsSingel.main( arguments, numberSequence, numberBases, reverseBases );
        }
        catch( NumberFormatException ex )
        {
            areaResultMultiple.setText( "Please enter a Number." );
        }
    }//GEN-LAST:event_btnShowRelationsSingelSampledActionPerformed

    /**
     * Shows the ORF-values of the current Sequences
     * @param evt the action event of the button
     */
    private void btnRelationsDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRelationsDataActionPerformed
        if( multipleSequences == null )
        {
            areaResultMultiple.setText( "No current Sequences" );
        }
        else
        {
            RelationsCurrent.main( arguments, multipleSequences );
        }
    }//GEN-LAST:event_btnRelationsDataActionPerformed

    /**
     * resets the weight values to a quarter for each base
     * @param evt the action event of the button
     */
    private void btnDefaultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDefaultActionPerformed
        fldAWeight.setText( 25 + "" );
        fldCWeight.setText( 25 + "" );
        fldGWeight.setText( 25 + "" );
        fldTWeight.setText( 25 + "" );
        
        sldAWeight.setValue( 25 );
        sldCWeight.setValue( 25 );
        sldGWeight.setValue( 25 );
        sldTWeight.setValue( 25 );
    }//GEN-LAST:event_btnDefaultActionPerformed

    /**
     * Displays the amount of a specific codon given in the tectfield
     * @param evt the action event of the button
     */
    private void btnSearchCodonsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchCodonsActionPerformed
        if( multipleSequences == null )
        {
            areaResultMultiple.setText( "Please read or generate Sequences first." );
        }
        String codon = fldCodonToSearch.getText();
        if( !codon.matches("[actgACTG]+") || codon.length() != 3 )
        {
            areaResultMultiple.setText( "Please enter a Codon of length 3 with the letters A, C, G or T." );
        }
        else
        {
            codon = codon.toUpperCase();
            int avgNumberCodon = 0;
            for( Sequence sequence : multipleSequences.getSequences() )
            {
                String bases = sequence.getBases();
                for( int i = 0; i < bases.length()-2; i++ )
                {
                    if( codon.equals( bases.substring(i, i+3) ))
                    {
                        avgNumberCodon++;
                    }
                }
            }
            avgNumberCodon = avgNumberCodon / multipleSequences.getSequences().size();
            fldNumberOfCodons.setText( avgNumberCodon + "" );
        }
    }//GEN-LAST:event_btnSearchCodonsActionPerformed

            
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        arguments = args;
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new App().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaResultMultiple;
    private javax.swing.JButton btnDefault;
    private javax.swing.JButton btnGenerateMultiple;
    private javax.swing.JButton btnPickORF;
    private javax.swing.JButton btnReadMultiple;
    private javax.swing.JButton btnRelationsData;
    private javax.swing.JButton btnSearchCodons;
    private javax.swing.JButton btnShowRelationsPairsSampled;
    private javax.swing.JButton btnShowRelationsSingelSampled;
    private javax.swing.JCheckBox cbIncludeReverseBases;
    private javax.swing.JTextField fldAWeight;
    private javax.swing.JTextField fldAvgLengthORFs;
    private javax.swing.JTextField fldAvgNumberORFs;
    private javax.swing.JTextField fldCWeight;
    private javax.swing.JTextField fldCodonToSearch;
    private javax.swing.JTextField fldGWeight;
    private javax.swing.JTextField fldLengthBiggestOrf;
    private javax.swing.JTextField fldNumberOfBasesMultiple;
    private javax.swing.JTextField fldNumberOfCodons;
    private javax.swing.JTextField fldNumberOfSequences;
    private javax.swing.JTextField fldORFLength;
    private javax.swing.JTextField fldORFNumberPick;
    private javax.swing.JTextField fldORFPosition;
    private javax.swing.JTextField fldORFReverse;
    private javax.swing.JTextField fldPathMultiple;
    private javax.swing.JTextField fldPositionLongestORFSequence;
    private javax.swing.JTextField fldSequenceLength;
    private javax.swing.JTextField fldSequenceNumber;
    private javax.swing.JTextField fldTWeight;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblATWeights;
    private javax.swing.JLabel lblAWeight;
    private javax.swing.JLabel lblAvgLengthORFs;
    private javax.swing.JLabel lblAvgNumberOrf;
    private javax.swing.JLabel lblCWeight;
    private javax.swing.JLabel lblGWeight;
    private javax.swing.JLabel lblGenerateSequences;
    private javax.swing.JLabel lblLengthBiggestORF;
    private javax.swing.JLabel lblNumberORFPick;
    private javax.swing.JLabel lblNumberOfBases;
    private javax.swing.JLabel lblNumberOfSequences;
    private javax.swing.JLabel lblORFLength;
    private javax.swing.JLabel lblPathMultiple;
    private javax.swing.JLabel lblPickSpecificORF;
    private javax.swing.JLabel lblPosition;
    private javax.swing.JLabel lblPositionLongestORF;
    private javax.swing.JLabel lblReverse;
    private javax.swing.JLabel lblSearchCodon;
    private javax.swing.JLabel lblSequenceLength;
    private javax.swing.JLabel lblSequenceNumber;
    private javax.swing.JLabel lblTWeight;
    private javax.swing.JPanel pnlGenerateSequences;
    private javax.swing.JSlider sldAWeight;
    private javax.swing.JSlider sldCWeight;
    private javax.swing.JSlider sldGWeight;
    private javax.swing.JSlider sldTWeight;
    // End of variables declaration//GEN-END:variables

}
